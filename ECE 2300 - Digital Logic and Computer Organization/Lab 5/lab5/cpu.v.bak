module cpu(CLK, RESET, EN_L, Iin, Din, PC, NextPC, DataA, DataB, DataC, DataD, MW);
  input         CLK;
  input         RESET;
  input         EN_L;
  input  [15:0] Iin;
  input  [7:0]  Din;
  
  output [7:0]  PC;
  output [7:0]  NextPC;
  output [7:0]  DataA;
  output [7:0]  DataB;
  output [7:0]  DataC;
  output [7:0]  DataD;
  output        MW;
  
  // comment the two lines out below if you use a submodule to generate PC/NextPC
  //reg [7:0] PC;
  //reg [7:0] NextPC;
  
  reg MW;
  
  
  
  // ADD YOUR CODE BELOW THIS LINE
  
  wire [7:0] programCounter;
  wire [15:0] instruction;
  
  wire [2:0] DR;
  wire [2:0] SA;
  wire [2:0] SB;
  wire [5:0] IMMO;
  wire MB;
  wire [2:0] FS;
  wire MD;
  wire LD;
  wire MW;
  
  wire [7:0] D_in;
  wire [7:0] DataA;
  wire [7:0] DataB;
  
  wire [7:0] aluOutput;
  wire C;
  wire V;
  wire N;
  wire Z;
  
  // Extended immediate value
  wire [7:0] IMME;
  
  wire [7:0] DRAMOutput;
  
  ProgramCounter pc(
      .CLK(CLK),
      .RESET(RESET),
    
      .PC(programCounter)
      );
  
  lab5iram iram(
      .CLK(CLK),
      .RESET(RESET),
      .ADDR(programCounter),
      .Q(instruction)
      );
  
  Decoder decoder(
      .INSTR(instruction),
    
      .DR(DR),
      .SA(SA),
      .SB(SB),
      .IMMO(IMMO),
      .MB(MB),
      .FS(FS),
      .MD(MD),
      .LD(LD),
      .MW(MW)
      );
  
  RegFile file(
      .CLK(CLK),
      .RESET(RESET),
      .SA(SA),
      .SB(SB),
      .LD(LD),
      .DR(DR),
      .D_in((MD == 1'b0 ? aluOutput : DRAMOutput)),
      .DataA(DataA),
      .DataB(DataB)
      );
  
  SignExtend extend(
      .IMM(IMMO),
      .OUTPUT(IMME)
      );
  
  alu lulu(
      .A(DataA),
      .B((MB == 1'b0 : DataB : IMME)),
      .OP(FS),
      .Y(aluOutput),
      .C(C),
      .V(V),
      .N(N),
      .Z(Z)
      );
  
  lab5dram dram(
      .CLK(CLK),
      .ADDR(aluOutput),
      .DATA(dataB),
      .MW(MW),
      .Q(DRAMOutput)
      );
      
  
  // ADD YOUR CODE ABOVE THIS LINE

endmodule