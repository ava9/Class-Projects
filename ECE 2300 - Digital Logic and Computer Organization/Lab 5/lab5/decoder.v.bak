module Decoder(INSTR, DR, SA, SB, IMMO, MB, FS, MD, LD, MW);
    input [15:0] INSTR;
    
    output [3:0] DR;
    output [3:0] SA;
    output [3:0] SB;
    output [5:0] IMMO;
    output MB;
    output [2:0] FS;
    output MD;
    output LD;
    output MW;
  
  parameter [3:0] RTYPE = 4'b1111;
  parameter [3:0] NOP = 4'b0000;
  
  parameter [2:0] ADD = 3'b000;
  parameter [2:0] SUB = 3'b001;
  parameter [2:0] SRA = 3'b010;
  parameter [2:0] SRL = 3'b011;
  parameter [2:0] SLL = 3'b100;
  parameter [2:0] AND = 3'b101;
  parameter [2:0] OR  = 3'b110;
  
  parameter [3:0] LB = 4'b0010;
  parameter [3:0] PSB = 4'b0100;
  parameter [3:0] ADDI = 4'b0101;
  parameter [3:0] ANDI = 4'b0110;
  parameter [3:0] ORI = 4'b0111;
  
  reg [3:0] DR;
  reg [3:0] SA;
  reg [3:0] SB;
  reg [5:0] IMMO;
  reg MB;
  reg [2:0] FS;
  reg MD;
  reg LD;
  reg MW;
  
  
  always @(*) begin
    
    parameter [3:0] OP = INSTR[15:12];
    parameter [2:0] RS = INSTR[11:9];
    parameter [2:0] RT = INSTR[8:6];
    parameter [2:0] RD = INSTR[5:3];
    parameter [2:0] FUNCT = INSTR[2:0];
    parameter [5:0] IMMV = INSTR[5:0];
    
    // If the instruction is a NOP
    if (OP == NOP) begin
      MW <= 0;
    end else if (OP == RTYPE) begin
      // else if the instruction is a R-type instruction
      
      // Switch on the lower 3 bits
      case (FUNCT) 
        ADD: begin
          FS <= ADD;
          DR <= RD;
          SA <= RS;
          SB <= RT;
          
          LD <= 1'b1;
          MB <= 1'b0;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        SUB: begin
          FS <= SUB;
          DR <= RD;
          SA <= RS;
          SB <= RT;
          
          LD <= 1'b1;
          MB <= 1'b0;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        SRA: begin
          FS <= SRA;
          DR <= RD;
          SA <= RS;
          
          LD <= 1'b1;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        SRL: begin
          FS <= SRL;
          DR <= RD;
          SA <= RS;
          
          LD <= 1'b1;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        SLL: begin
          FS <= SLL;
          DR <= RD;
          SA <= RS;
          
          LD <= 1'b1;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        AND: begin
          FS <= AND;
          DR <= RD;
          SA <= RS;
          SB <= RT;
          
          LD <= 1'b1;
          MB <= 1'b0;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        OR : begin
          FS <= OR;
          DR <= RD;
          SA <= RS;
          SB <= RT;
          
          LD <= 1'b1;
          MB <= 1'b0;
          MD <= 1'b0;
          MW <= 1'b0;
        end
      endcase
    end else begin
      // Otherwise the instruction is an S-type instruction
      
      case (OP)
        LB: begin
          FS <= ADD;
          DR <= RT;
          SA <= RS;
          
          IMMO <= IMMV;
          MB <= 1'b1;
          
          LD <= 1'b1;
          MD <= 1'b0;
          MW <= 1'b0;
        end
        PSB: begin
          FS <= ADD;
          SA <= RS;
          SB <= RT;
          
          IMMO <= IMMV;
          MB <= 1'b1;
          
          LD <= 1'b0;
          MW <= 1'b1;
        end
        ADDI: begin
          FS <= ADD;
          DR <= RT;
          SA <= RS;
          
          IMMO <= IMMV;
          MB <= 1'b1;
          
          LD <= 1'b1;
          MW <= 1'b0;
          MD <= 1'b0;
        end
        ANDI: begin
          FS <= AND;
          DR <= RT;
          SA <= RS;
          
          IMMO <= IMMV;
          MB <= 1'b1;
          
          LD <= 1'b1;
          MW <= 1'b0;
          MD <= 1'b0;
        end
        ORI: begin
          FS <= OR;
          DR <= RT;
          SA <= RS;
          
          IMMO <= IMMV;
          MB <= 1'b1;
          
          LD <= 1'b1;
          MW <= 1'b0;
          MD <= 1'b0;
        end
      endcase
    end
  end
endmodule